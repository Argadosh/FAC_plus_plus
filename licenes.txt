Лекции по "Фундаментальные алгоритмам на с++"

11.09.24

Лепчинский Михаил Германович

email - migele.csu@gmail.com

Литература:
	Кормен, Лейзерсон, Ривест, Штайн 
		Алгоритмы. Построение и анализ Издание 3-е
	Дасгупта, Пападимитриу, Визирани
		Алгоритмы
	Дональд Кнут
		Искусство программирования. Том 1-3
	Абрамов
		Лекции о сложности алгоритмов
	Справочник по с++
		www.cppreference.com

Бально-рейтинговая система
1) Домашние задания:
	Начисляется 1 сырой балл за каждое сделанное задание.
		Максимум 60 итоговых баллов за домашние задания
2) Семестровое задание
	Два задания по темам практик и лекций
		Максимум 15 + 15 итоговых балла
3) Экзамен
	Два вопроса в билете
		Максимум 10 + 10 итоговых балла
	
Оценка:
	3 - 60
	4 - 75
	5 - 90

c++ 11 и его особенности

	1) ссылки на временные обьекты и семантика перемещения rvalue-ссылки T&&, std::move(), std::forward()
	2) Обобщённые константные выражения constexp
	3) списки инициализации 
		SquenceClass someVar = {1,4,5,6}
	4) Универсальная инициализация
		SomeClass someVar {"some_value", 4}
	5) Вывод типов. Ключевое слово auto
	6) For - цикл по коллекции
		for(int &x : my_array)
	7) Лямбда - функции и выражения
		[](intx, int y) {return x+y;}
	8) Константа нулевого указателя nullptr
	9) Перечисления со строгой типизацией 
		enum class Enumeration {val1,val2,val3};
	10) Создание алиасов для классов вместо typedef
		using intvec = std::vector <int> 
	11) Шаблоны с переменным числом аргументов
		template <typename ... Values> class tuple
	12) Расширяемые классы генерации случайных чисел

Строго следуйте code style "гайдам", принятым в вашей корпоративной среде

https:/tproger.ru/translations/stanford-cpp-style-guide

25.09.24

Тема: <Структуры данных>

	Stack и его применение в алгоритмах

Опр.
	Steck-ом называется обстрактный тип данных, обладающий следующим набором операций:
		1) push(x) - положить x на вершину steck
		2) pop() - извлечь вершину
		3) top() - прочитать вершину
		4) size() - получить размер steck
		
Возможные реализации stack:
	1) Реализация с помощью массивов.
		Для хранения эл-ов stack резервируется массив зараннее определённого размера и создаётся счётчик count, который показывает на первую свободную ячейку
	2) Реализация с помощью связного списка.
		Вершина -> [data|next] -> [data|next] -> ... -> [ | ] ->
		1) push
			{x, next} -> top -> [|] -> [|] -> ...
			после перекинуть top перед первой ячейкой
		2) pop
		top -> [|] -> [|] ->
		tmp = top;
		top = top.next;
		delete tmp;
	3) Реализация с помощью "расширяемого" массива
		Для хранения данных выделяется массив.
		При этом, если операция push должна привести к переполнению этого массива,
			то выделяется массив в два раза большего размера, в который переносятся данные из старого.
	4) Комбинированная реализация
		Для хранения используем список массивов
			[|||] -> [|||||] -> [||||||||] ->
		Политика увеличения размеров чанков:
			1) Постоянный размер ( к примеру 100 )
			2) Линейный рост: (100, 200, 300, ....)
			3) Квадратичный рост: (100, 400, 900, 1600, ....)
			4) Экспонециальный рост: (2^0 * 100, 2^1 * 100, 2^3 * 100, ... )
		Политика удаления чанков:
			1) Когда опустошается половина последнего чанка, то опустошаем пустой чанк
			2) Когда опустошаются два последних чанка, опустошаем последний пустой чанк
Интерфейс класса stack:
	
	1) С помощью массива:
		template <typename T>
		class stack_m{
		private:
			T* data;
			size_t capacity, count;
		public:
			stack_m(size_t _capacity = 50000);
			~stack_m();
			void push(const T &new_top);
			void push(T&& new_top);
			void pop();
			T& top();
			const T& top() const;
			size_t size() const;
			stack_m(const stack_m<T> &obj);
			stack_m(stack_m<T> &&obj);
			stack_m<T>& operator= (const stack_m<T> &obj);
			stack_m<T>& operator= (stack_m<T> &&obj);
		};
		
		template <typename T>
		stack_m<T>::stack_m(size_t _capacity){
			count = 0;
			capacity = _capacity;
			data = new T[capacity];
		}
		template <typename T>
		stack_m<T>::~stack_m(){
			delete []data;
		}
		template <typename T>
		void stack_m<T>::push(const T &new_top){
			if (count == capacity){
				throw std::overflow(); //Возможно не прям так.
			}
			data[count++] = new_top;
		}
		template <typename T>
		void stack_m<T>::push(T&& new_top){
			if (count == capacity){
				throw std::overflow(); //Возможно не прям так.
			}
			data[count++] = new_top;
		}
		
09.10.24

Алгоритмы со стеками

1) Задача о правильных скобочных выражениях
	Дана последовательность открывающихся и закрывающихся скобочек нескольких типов. 
	Требуется определить является ли эта скобочная последовательность правильной.
	
	Определение: Правильными скобочными выражениями называются последовательности, которые могут быть построены путём применения следующих трёх правил:
		1) Пустая последователньость правильная
		2) Если s - правильная последователньость, то (s) - тоже правильная
		3) Если s1 и s2 - правильные, то конкатинация s1,s2 - тоже
		
	Алгоритм проверки правильности:
		1) Создаём стек скобок S 
		2) Просматриваем последователньость слева направо:
			Если очередная скобка:
				Если открывающаяя - заносим в S 
				Если закрывающаяя:
					Если она парная к S.top(), то делаем S.pop()
					Иначе последователньость неправильная
			Если S - пустой, то последовательность правильная
			иначе неправильная 

2) Задача о мажорирующем элементе
	Дана последователньость элементов. 
	Требуется выяснить, есть ли среди них мажор 
	
	Определение: Мажорирующим эл-ом последовательности называется такое значение, которое встречается в последовательности больше половины раз 
	
	Алгоритм большинства голосов:
		1) Создаём стек элементов S.
		2) Просматриваем последователньость слева направо 
			Если стек пуст, то закидываем в него текущий элемент 
			Если стек не пуст, то сравниваем текущий элемент и S.top()
				Если равны, то S.push()
				Если не равны, то S.pop()
		3) Если в конце в стеке ничего нет, то мажора нет
			Иначе считаем сколько раз S.top() встречается в последовательности
				Если встречается больше половины раз, то это мажор
				Иначе нет мажора.
				
3) Алгоритм нахождения эйлерова пути в графе

	Определение: Пусть G - граф, ориентированный или неориентированный. 
	Эйлеровым путём в G называется путь, который проходит по каждому ребру G ровно 1 раз
	
	Алгоритм:
		1) Создаём стек вершин S
			Если в графе G две нечётные вершины, то заносим в S любую из них. Иначе вообще любую заносим.
			
			Определение: Вершина называется чётной, если из неё выходит чётнео кол-во рёбер.
		2) Пока стек S не опустел:
			Читаем вершину u = S.top();
			Если в графе G есть непройденное ребро u-v, то S.push(v), а ребро u-v помечаем пройдённым. Иначе дописываем u в конец пути и S.pop()
			
4) Задача о построение выпуклой оболочки множества точек

	Дано конечное множество точпек на плоскости
	Требуется указать наименьший выпуклый многоугольник, содержащий все эти точки, перечислив в порядке обхода все его вершины
	
	
	Алгоритм:
		Шаг 1: Находим самую нижнюю точку множества, присваиваем ей номер 0.
		Шаг 2: Нумеруем оставшиеся точки, от 1 до n - 1 в порядке возрастания полярного угла из точки с номером 0.
		Шаг 3: Обход Грэхема.
			Создаём стек точек S.
			Заносим в S 0 и 1.
			Просматриваем оставшиеся точки от 2 и по возрастанию.
				1) Пусть на вершине стека лежат т. а и б.
				2) Пусть текущаяя точка имеет номер с.
				3) Если поворот от вектора аб к ветктору бс происходит против часовой стрелки, то мы помещаем точку с в стек S.
				4) Иначе мы делаем S.pop() и идём в пункт (1).
			В конце, всё что отслаось в стеке - это и есть вершины выпуклой оболочки в порядке обхода.
			
23.10.24

5) Вычисление символьных выражений

	Дана строка символов, содержащая запись арифметического выражения, состоящего из:
		- Констант
		- Переменных
		- Скобок
		- Знаков арифметических действий
		- Вызовов функций
		- Обращение к элементам массивов
		
	Известно значение переменных, каждой вычисляемой функции, а также содержимое массивов
	
	Требуется вычислить значение выражения (*):
		3.15 * abc - x * foo(a-b/(a+2^a/b*c))
		
	Этап 1 (Разделение на термы):
		[] - терм.
		[3.15][*][abc][-][x][*][foo][(]....
	
		Реализация структуры "терм" на с++:
		
		enum class term_type{
			constant,
			var,
			op_br,
			cl_br,
			op,
			fun
		};
		
		struct term{
			string name;
			term_type type;
		};
		
		
		Необходимо реализовать функцию, которая принимает на вход строку символов,
			а на выходе выдаёт вектор термов.
		
	Этап 2 (Преобразование в постфиксную запись):
	
		Опр.
			Постфиксной записью арифметического выражения называется такая запись, в которой операция или функция указывается после своих аргументов
			
		Пр1.
			a+b -> ab+
			sin(x) -> x sin
		
		Пр2. (*)
			3.15abc*xaba2a^b/c*+/-foo*-

		Алгортим преобразования в постфиксную запись:
			1) Создаём стэк операций S и выходной вектор out
			2) Просматриваем исходнубю последователньость термов слева направо
			3) Если очередной терм - это:
				- константа или переменная, то помещаем его в конец out.
				- Открывающая скобка или функция, то помещаем его в S.
				- Закрывающая скобка, то извлекаем с вершины S в out все термы вплоть до первой открывающей скобки, которую удаляем.
				- Операция, то извлекаем из S в out все термы с большим либо равным приоритетом,
					до тех пор, пока стэк не опустеет или встретиться открывающая скобка, или операция с меньшим приоритетом
					(при этом функции считаюся операциями с высшим приоритетом)
					после чего помещаем текущий терм в S.
			4) Всё, что осталось в S, выталкиваем в out.
			
		Пример для (*):
		
			до 4-го пункта
				s:		-*foo
				out:	3.15abc*xaba2a^*c*+/-
				
			после:
			
				s: 
				out: 	3.15abc*xaba2a^b/c*+/-foo*-
				
	Этап 3 (Вычисление постфиксной записи):
		
		Создаём числовой стэк S и просматриваем постфиксную запись out слева направо 
		
		Если очередной терм - это :
			- Константа или переменная, то заносим его значение в стек S 
				( stod - функция для получения из строки число )
			- Операция или функция, то извлекаем из S необходимое кол-во элементов,
				вычисляем результат операции и помещаем его в S
				
		Если выражение было корректное, то в конце в S остананется ровно 1 число - результат вычисления
		
		Пример для (*)
		
		S:	3.15 abc  -> 3.15*abcxaba2a -> 3.15*abcxaba2^a -> 3.15*abcxaba2^a/b -> 3.15*abc xaba2^a/b*c -> 3.15*abcxaba+2^a/b*c -> ....
		
	
6) Задача о затопленном рельефе.

										 ___
										|	|
					 ___ _______________|	|
					|	|xxxxxxxxxxxxxxx|	|
			 ___ ___|	|xxxxxxxxxxx|	|	|___ ___
		 ___|	|xxx|	|	|xxxxxxx|	|	|xxx|	|
		|	|	|xxx|	|	|xxx|	|	|	|	|	|
	____|___|___|___|___|___|___|___|___|___|___|___|___
	
	
	Дана последователньость прямоугольников, заданных высотой и шириной, требуется вычислить площаль затопления (области с х)
	
7) Задача о Контрабанде

	|		 ____					|
	|		|	 |			________|
	|_______|	 |	  _____|		|
	|		|	 |___|	   |		|
	|_______|____|___|_____|________|

	На прямой расположены несколько прямоугольников, заданных высотой и шириной.
		Требуется определить прямоугольник максимальной площадью, который полностью покрывается данными прямоугольниками
		
Использование стандартной библиотеки:

	std::vector - универсальный контейнер, реализованный по принципу расширяющего массива
	
	конструкторы:
	
		vector<int> int_vec(15); - будет создан вектор из 15 элементов и все они будут равны значению по умолчанию;
		
		vector<string> str_vec(10, "empry value");
		
		vector<vector<double>> dbl_matrix(10, vector<double>(20, -1.0)); - матрица 10*20 состоящая из -1.0
		
		vector<string> str_vec2(str_vec.begin() + 1, str_vec.begin() + 4);
		
		vector<string> terms(get_term_from_expression("3.5*sin(x^ln(x-y))");
		
	функции:
	
		size();
		resize();
		capacity(); - кол-во зарезервированных элементов
		empty();
		reserve(); - задаёт capacity
		[];
		front();
		back();
		
		begin();
		end();
		cbegin();
		cend();
		rbegin();
		rend();
		assign();
		
		push_back();
		pop_back();
		insert();
		erase();
		swap();
		clear();
		
Лямбда выражения
	[captures] (param) lambds-specifiers requires(optional) {body};

		captures - область захвата
		param - аргументы функции
		
	Типичная лямбда с захватом всех переменных по ссылке со списком маратмеров и автовыделением возвращаемого типа
		[&](/*someparam*/) {/*somecode*/}
		
	Типичная лямбда без захвата
		[](/*someparam*/) {/*somecode*/}
		
	mutuble - разрешает изменять
		
Примеры:
	double x = 3.5, y = 1;
	auto f [&x, y](double z)mutable->int{x *= 2; y = y+1; cout << "x= " << x << "y= " << y << endl; return x*y/z;
	
	cout << f(3.5);
	cout << "x= " << x << "y= " << y << endl; (7, 1);

Non-modifying sequence operations

	all_of(int_vec.begin(), int_vec.end(), [](auto x) {return x % 2; });
	any_of(int_vec.begin(), int_vec.end(), [](auto x) {return x % 2; });
	none_of(int_vec.begin(), int_vec.end(), [](auto x) {return x >= 0 && x == pow((int)sqrt(x), 2); });
	
	Поиск элементов
	
		find(int_vec.begin(), int_vec.end(), -1) - int_vec.begin() << endl;
		
	Подсчёт элементов
		
		count(int_vec.begin(), int_vec.end(), -1);
		
	Копирование
	
		copy(str_vec.begin(), str_vec.end(), back_inserter(str_vec2));
06.11.24

Реализация класса Matrix


	class Matrix{
	private:
		std::vector<std::vector<double>> m;
	public:
		~Matrix() {};
		Matrix(); // Создаёт пустую матрицу
		Matrix(size_t rows, size_t cols);
		Matrix(size_t n);
		static Matrix unit_matrix(size_t n);
		static Matrix row_matrix(size_t n);
		static Matrix col_matrix(size_t n);
		Matrix(const std::vector<double>& diag);
		Matrix(const Matrix& obj);
		Matrix(Matrix&& obj);
		Matrix(const std::vector<std::vector<double>>& src);
		Matrix(std::vector<std::vector<double>>&& src);
		size_t rowSize() const;
		size_t colSize() const;
		size_t size() cost;
		std::vector<double>& operator[](size_t row); // Для записи
		const std::vector<double>& operator[](size_t row) const;
		Matrix& operator=(const Matrix& src);
		Matrix& operator=(Matrix&& src);
		Matrix operator+(const Matrix& rhs) const;
		Matrix opeartor-(const Matrix& rhs) const;
		Matrix operator*(const Matrix& rhs) const;
		Matrix operator*(double mulltiplier) const;
		Matrix operator^(int power) const;
		friend Matrix operator*(double mulltiplier, const Matrix& obj);
		Matrix operator/(double divider) const;
		Matrix operator/(const Matrix& rhs) const;
		Matrix& operator+=(const Matrix& rhs) const;
		Matrix& operator-=(const Matrix& rhs) const;
		Matrix& operator*=(const Matrix& rhs) const;
		Matrix& operator*=(double mulltiplier) const;
		friend Matrix operator*=(double mulltiplier, const Matrix& obj);
		Matrix operator/=(double divider) const;
		Matrix operator/=(const Matrix rhs) const;
		Matrix inverse() const;
		double det() const;
		Matrix transpose() const;
	};
	
Некорневые и корневые деревья
	Опр. Некорневое дерево - связный граф без циклов.
	Опр. Циклом в графе наз-ся замкнутый путь, содержащий хотя бы одно ребро.
	
	Способы хранения некорневого дерева:
		1) Матрица смежности.
			Очень неэкономичное использование памяти. Очень долгоие определение смежных вершин.
		
		2) Списки смежности.
			|_|_|_|_|i|_|_|_|_|
					 ^
					 |
					 _				3N - 2 ячейки памяти.
					|_|
					|_|
		
		3) Код Прюхера.
			Опр. Кодом Прюхера пронумерованного от 0 до (N-1) дерева T наз-ся последователньость из (N-2) чисел, построенная по следующему правилу:
				Повтораяем N-2 раза
					1) Находим в T вершину v с наименьшим номером, имеющую ровно 1 соседа u ( висячая вершина )
					2) Добавляем в конец кода u 
					3) Удаляем из T вершину v и ребро u-v
				Расшифровка кода Прюхера
					1) Создаём список S = {0, 1, .... , N-1}
					2) Просматриваем код слева-направо:
						2.1) Пусть a - текущая позиция кода.
						2.2) Находим в списке S наименьшее число, отсутствующее в кода, начиная с позиции a, пусть это число b.
						2.3) Добавляем в дерево ребро a-b.
						2.4) Из S убираем b.
					3) В конце в списке S останется два числа S1 и S2.
					4) Добавляем в дерево S1, S2.
					
20.11.24

Корневые деревья.
	Опр.
		Корневым деревом называется структура, которая описывается следующим рекурентным образом:
			- Пустое дерево.
			- Корень + множество его поддеревьев, каждое из которых является деревом.
	Опр.
		Корневое дерево называется упорядоченным, если для каждого узла зафиксирован порядок поддеревьев.
	Опр.
		Корневое дерево называется k-позиционным, если каждый узел имеет ровно k потомков, некоторые из которых могут быть пустыми.
	
	Способы представления корневых деревьев:
		1) Способы для непозиционных деревьев:
			|		Данные			|
			|_______________________|	  _ _ _ _ _ 	
			|		Список потомков | -> |_|_|_|_|_|
			|_______________________| -> |_|_|_|_|_|
		
		Левый сын - правый сосед
			|  Данные |
			|----|----| -> Правый брат
			  ^
			  |
			  Левый сын
		2) Способы для позиционных деревьев:
			а) Поименнованные потомки.
			
				|  Данные  |
				|----|-----|
				|left|right|
				 ----------
			б) С помощью массива.
				Для хранения данных из узлов дерева резервируем массив достаточно большой длинны, а для узлов дерева применяем следующую нумерацию:
					Нумеруем сверху слева направо, начиная с 0.
					Тогда потомком узла, записанного в ячейке с номером n массива с номером m будут узлы, записанные в ячейке mk+1, mk+2,....,mk+k.

Двоичные деревья поиска.
	Опр.
		ДДП - это 2-позиционное дерево, каждому узлу которого предписан ключ и данные таким образом,
			что для любого узла все ключи в его левом поддереве строго меньше ключа в этом узле, а в правом - строго больше.
	Операции с ДДП:
		1) Операции поиска:
			- find(key) - Находит данные по ключу key.
			- findmin() - Поиск минимального ключа.
			- findmax() - Поиск максимального ключа.
			- findnext(key) - Поиск следующего по значению key.
			- findperv(key) - Поиск предыдущего по значению key.
		2) Операции модификации:
			- insert (key, data) - Вставить узел с ключом key и данными data, если такой ключ уже есть в дереве, то подменить данные.
			- remove (key) - удалить узел с ключом key.
		3) Метрики дерева:
			- size() - кол-во узлов.
			- height() - высота дерева.
		4) Деструктор
			- delete_tree(ptr) - удалить дерево с корнем ptr.
			
	Реализация операций:
		1)
		- find(key)
			Текущий узел устанавливаем на корень. Пока текущий - не пустой и ключ текущего != key
				if ключ.текущего < key
					текущий = текущий->right;
				else
					текущий = текущий->left;
			Искомый ключ будет находиться в текущем узле, если такой ключ вообще есть в дереве.
		- findmin()
			Устанавливаем текущий узел на корень и идём влево, пока есть левый сын.
			Последний узел без левого сына и есть минимальный ключ.
		- findnext(key)
			Действуем точно также, как в операции find, но при этом запоминаем в отдельной переменной ключ, от которого мы перешли налево в последний раз.
			Если узел с ключом key не имеет правого сына, то запомненный ключ и есть искомый,
			иначе следующий по значению ключ - это минимальный ключ в поддереве правого сына.
		- findprev(key)
			Действуем точно также, как в операции find, но при этом запоминаем в отдельной переменной ключ, от которого мы перешли направо в последний раз.
			Если узел с ключом key не имеет левого сына, то запомненный ключ и есть искомый,
			иначе следующий по значению ключ - это максимальный ключ в поддереве левого сына.
		2)
		- insert (key, data)
			Действуем также, как в операции find, но при этом запоминаем связь между текущим узлом и его отцом.
			Если узла с ключом key нет в дереве, то создаём новый узел с ключом key и данными data и размещаем его в том месте, на котором закончился поиск.
			Иначе, подменяем данные в узле.
		- remove (key)
			Действуем также, как в операции find.
			Если узла нет, то ок!
			Если есть, то:
				1) у узла нет потомков.
					Высвободить узел, а отцу сообщить, кто нет у него больше этого сына.
				2) у узла ровно 1 потомок.
					Сообщаем отцу, что теперь его сын - это внук, а удаляемый узел высвобождаем.
				3) у узла два потомка.
					- Находим в правом поддереве ключа key следующий по значению ключ key'.
					- Заменяем данные узла key на данные и ключ узла key'.
					- Отцу key' сообщаем, что его сын - это внук ( внук, который правый сын key' ).
					- Высвобождаем узел key'.
		4) Деструктор
			1) Рекусивная реализация
				void delete_tree(ptr){
					if (!ptr) return;
					delete_tree(ptr.left);
					delete_tree(ptr.right);
					delete ptr;
				}
				delete_tree(root) удаляет всё дерево
			2) Итеративный деструктор
				Создаём стек указателей s
				Текущий узел устанавливаем на root
				while ( s.size() || текущий узел ){
					if (текущий не пуст)
						помещаем текущий в стек
						текущий = текущий.левый_сын
					else
						текущий = s.top().right;
						высвобождаем s.top();
						s.pop();
				}
04.12.24
Алгоритмы с графами.

1-й класс задач на поиск в ширину
2-й класс задач на поиск в глубину
3-й класс задач решаются особыми методами

Опр. Поиск в ширину:
	Пусть G - это ориентированный или неориентированный граф. Поиском в ширину из вершины s этого графа называется такое перечисление вершин, 
		при котором вершины менее удалённые от s перечисляются раньше вершин более удалённых.
		При этом расстояние от вершины s до вершины графа v из G называется минимальная длина пути от s до v в терминах кол-ва ребер.
		
	Поиск в ширину выводит вершины от 0 до n-го фронта. Фронт - показывает, как далеко удалена вершина v от вершины s.
	
	Схема алгоритма поиска в ширину:
		
		Вход: Граф G, заданный списками смежности. Стартовая вершина s1
		
		Выход: массив глубин d[0...n-1], массив предков p[0...n-1]
		d[v] - манимальная длина пути от s до val1
		p[v] - предыдущий от v вершина в минимальном пути
		
		Этам 1. Инициализация
			for all v from G{
				d[v] = +oo;
				p[v] = -1;
			}
		Этап 2. Обход
			d[s] = 0;
			создать очередь q ( queue не stack )
			q.push(s);
			while (!q.empty){
				u = q.front();
				q.pop();
				for all v from G[u]{
					if (d[v] == +oo){
						d[u] = d[u]+1;
						q.push(v);
						p[v] = u;
					}
				}
			}
	
	Применение поиска в ширину:
	
		1) Нахождение длинн кратчайших путей из вершины s до всех остальных вершин. Определяется с помощью массива d.
		
		2) Нахождение кратчайшего пути от произвольной веришны v из G до s
			Если d[v] = +oo, то пути нет.
			Иначе путь получается с помощью итерирования массива p от вершины v до вершины s:
				v -> p[v] -> p[p[v]] -> ...... -> s 
		
		3) Определение связности неориентированого графа G
			Выполняем поиск в ширину из произвольной вершины графа G
			Если d[v] = +оо для некоторой v из G, то граф несвязен, иначе связен.
		
		4) Определение кол-ва компонент связности 
			count = 0;
			Выполняем инициализацию ( Этап 1 )
			for (s = 0; s < n; s++){
				if (d[s] == +oo){
					count++;
					Обход из вершины s ( Этап 2 )
				}
			}
			
		5) Определение двудольности графа
			Опр. Неориентированный граф G называется двудольным, если все его вершины можно поделить на две непересекающиеся доли A и B,
				что концы любого ребра G лежат в разных долях.
			Выполняем инициализацию ( Этап 1 )
			for (s = 0; s < n; s++){
				if (d[s] = +oo) {
					Обход из вершины s ( Этап 2 )
					( добавляем else в последний if )
						else if ((d[u] + d[v]) % 2 == 0){
							return false;
						}
				}
			}
			return true;
		
	Сложность алгоритма:
	
		O(V + E), где V - мно-во вершин. E - мн-во рёбер.
		
	Пример:
		
		Определение изоморфизма деревьев
			Опр. Говорят, что два графа G1(V1,E1) и G2(V2,E2) изоморфны, если существует биекция б : V1 -> V2
				Такая, что вершины u и v соединены ребром в G1 <-> б(u) и б(v) соединены в графе G2
		
		Пусть T1 и T2 - две дерева, заданных списками смежности.
		Алгоритм проверки изоморфизма
			- Если кол-во вершин T1 != количеству вершин T2, то изоморфизма нет
			- По дереву T1 строим корневое дерево T1(0) с корнем в вершине с номером 0.
			- Строим код дерева T1(0), назовём его code1
			- for (s = 0; s < |T1|; s++){
				- Строим по T2 корневое дерево T2(s) с корневым s1
				- Строим код T2(s), назовём его code2(s)
				- Если code1 == code2(s), то return true
			}
			- return false
		
		Построение кода корневого дерева
			Начинаем с нижнего уровня дерева и движемся вверх:
				1) С каждой вершины текущего уровня присваиваем вектор меток её прямых потомков
				2) Сортируем эти векторы по возрастанию
				3) Сортируем набор полученных векторов в лекско-граф порядке
				4) Сопоставляем векторам в отсортированном наборе метки по возрастанию начиная с 0, причём равным векторам равные метки
				5) Вершине уровня сопоставляется клетка, которую сопоставили её вектору
			Кодом текущего уровня нашего дерева называется набор полученный на шаге 3
			Кодом всего дерева называется набор кодов всех его уровней с первого и до последнего